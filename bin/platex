#!/usr/bin/perl -w
# run platex --man or perldoc platex to get documentation

=head1 NAME

platex - a (PDF)LaTeX compiler script

=head1 SYNOPSIS

        platex [options] <[--input] file>

        Options:

          --input F    Set input filename to F

	  --log        Output log always
	  --verbose    Increase verbosity (may be repeated)
          --quiet      Decrease verbosity (may be repeated)
	  --fussy      Display overfull hbox warnings

          --clean      Remove some generated files
          --cleanall   Remove all generated files
          --pdf        Generate PDF output
          --ps         Generate PS output
          --dvi        Generate DVI output (default, if no other target)

	  --repeat N   Set maximum repeat count to N

          --help       Display usage and exit successfully
          --man        Display man page and exit successfully
          --version    Display version and exit successfully

        Commands marked with asterisk (*) also have matching
	--no prefix. For example, --nodebug to force debug off.

=head1 INTRODUCTION

B<platex> is a Perl script that, in close collaboration with latex,
pdflatex, bibtex and initex, compiles a latex document. To compile
document main.tex, just run following command:

        platex main

Now, if F<main.tex> is a valid B<latex> source, B<platex> compiles it,
including any table of contents, indices, bibliography references,
included files, and so on.

=cut

use strict;
use Pod::Usage;
use Getopt::Long;
Getopt::Long::Configure("gnu_getopt","auto_help");
use File::Basename;
use File::Copy;
use File::Spec;
use File::Spec::Functions qw/devnull catfile catdir tmpdir rootdir path curdir/;
use Term::ReadLine;
use Term::ANSIColor qw(:constants);
#use Config;

$main::VERSION = "platex 0.1";

my $term = new Term::ReadLine 'mk';

my @actions = ();

# command line settable parameters
our ( $verbose, $repeat,  $print_log, $fussy  ) =
    ( 0,        4,        0,          0       );

my @warnings_to_skip = (
#   'Package hyperref Warning: Token not allowed in a PDFDocEncoded string',
#   'Package array Warning: Column [XY] is already defined on '
);

my $input = '';

GetOptions(
	'input|i=s'	=> \$input,

	'log|l!'	=> \$print_log,
	'verbose|v'	=> sub { $verbose++ },
	'quiet|q'	=> sub { $verbose-- },
	'fussy|f'	=> \$fussy,

	'clean|c'	=> sub { push(@actions,"clean"); },
	'cleanall|C'	=> sub { push(@actions,"cleanall"); },
	'pdf|p'		=> sub { push(@actions,"pdf"); },
	'ps|P'		=> sub { push(@actions,"ps"); },
	'dvi|d'		=> sub { push(@actions,"dvi"); },

	'repeat|r=i'	=> \$repeat,

	'help|h|?'	=> sub { pod2usage(0); },
	'man'	        => sub { pod2usage(-exitstatus => 0, -verbose => 2); },
	'version|V'	=> \&version,
) or pod2usage(2);

$input = $ARGV[0] || '' unless $input;
push(@actions,"dvi")    unless @actions;

my $bibtex_counter = 0; # number of times bibtex has been already run

my $linenum = 1;
my $errorfile = "platex-errors.log";

if (! $input )
{
	warn("Missing file name to process.\n");
	pod2usage(3); # exit with error status 3
}
my $basename = $input;
$basename =~ s/[.]tex$//; # remove extension, if any

-f $basename or -f $basename.".tex" or warn "platex: warning: input '$input' is not a regular file (tried $basename and $basename.tex).\n";

warn("platex: list of actions to do: @actions\n") if $verbose > 2;

# main loop:
foreach my $action (@actions)
{
	if ($action eq "clean")
	{
		warn("platex: removing unneeded generated files.\n") if $verbose >= 1;
		clean();
	}
	elsif ($action eq "cleanall")
	{
		warn("platex: removing all generated files.\n") if $verbose >= 1;
		cleanall();
	}
	elsif ($action eq "dvi")
	{ compile("dvi"); }
	elsif ($action eq "pdf")
	{ compile("pdf"); }
	elsif ($action eq "ps")
	{ compile("ps"); }
}
exit(0); # all went okay.

sub clean
{
	rm("$basename.log");
	rm("$basename.blg");
	rm("$basename.ilg");
	rm("$basename.ind");
	rm("$basename.out");
	rm("$basename.brf");
	rm("$basename.idx");
	rm("$basename.toc");
	rm("$basename.lof");
	rm("$basename.lot");
}

sub cleanall
{
	clean();
	rm("$basename.aux");
	rm("$basename.bbl");
	rm("$basename.dvi");
	rm("$basename.ps");	
	rm("$basename.pdf");	
}

sub rm($)
{
	my ($f) = @_;
	warn("Removing '$f'\n") if $verbose >= 2;
	$f =~ m/\.(dvi|log|aux|bbl|blg|ilg|toc|lof|lot|idx|ind|out|brf|pdf|ps)$/ or die("internal error");
	my $c = unlink($f);
	if ($c != 1 and ! ($! =~ m/No such file or directory/) )
	{
		warn("platex: failed to remove '$f': $!\n");
	}
}


# compile($target): generates $basename.$target
sub compile
{
	my ($target) = @_;
	
	$target =~ m/^(dvi|ps|pdf)$/ or die("platex: target '$target' not supported");

	my $log;

	my $counter = 0;
	RETRY: for (my $i = 1; $i <= $repeat; $i++)
	{
		debug("platex: running latex again.\n") if ($i > 1);
		
		my $command =
        		"latex ".
        		"-interaction=batchmode ". # never wait user input on error
        		"$basename";
		$counter++;
		my $discard = sys($command);
        		
		$log = parse_log("$basename.log");
		if (check_no_errors($log))
		{
			last RETRY;
		}
		else
		{
			try_to_fix_errors($log) if ($i < $repeat); # try to fix unless this is last run
		}
	}

	if (check_no_errors($log) )
	{
		print("All Done. Had to run latex $counter times.\n") if ($counter > 1 and $verbose >= 0) or ($verbose > 1);
		print("\nLog follows:\n".$log) if $print_log;

		$fussy and check_overfull($log);

		#if ($ps)
		#{
		#	print("platex: generating PS\n");
		#	sys("dvips $basename -o $basename.ps");
		#}
		#if ($pdf)
		#{
		#	warn("platex: PDF output not yet supported.\n");
		#}
	}
	else
	{
		print("Tried to run latex $counter times and errors still remain.\n") unless $verbose < -2;

		print("\nLog follows:\n".$log) if $print_log;

		display_errors($log);
		exit(1); # there were errors
	}
}

sub check_overfull($)
{
	my ($log) = @_;

	while ( $log =~ m/^([\/a-z0-9_.-]*?): Overfull \\hbox \([0-9.]+pt too wide\) in paragraph at lines (\d+)--(\d+)/mig )
	{
		print("$1: note: cannot nicely break lines $2-$3.\n");
	}
	
	return 1;
}



sub parse_log($)
{
	my ($logfile) = @_;
	my ($log, @lines, $line,@files,$file,$output);
	open(LOG, "<", $logfile) or die("platex: cannot open log file '$logfile'.\n");
	local $/ = undef;

	@files = ();
	$file = "latex";
	$output = "";

	$log = <LOG>; # read all of log at once

	$log =~ s/file:line:error style messages enabled.//gsm;
	$log =~ s/^\*\*[a-zA-Z0-9._-]+?$//sm;

	$log =~ s/([^\n]{79})\n/$1/gsm; # combine broken lines (remove linefeed if line length is 79 chars)
	$log =~ s/\n {15}/ /gsm; # combine broken lines
	$log =~ s/\(1in=[.0-9]+pt, 1cm=[.0-9]+pt\)//gsm; # this looks like file line but is not! Remove it!
	$log =~ s/\n\(Font\)\s+/ /gms; # No need for this either
	$log =~ s/\n\(babel\)\s+/ /gms; # No need for this either

	$log =~ s/([[]\d+)(\n+)([]])/$1$3/gsm; # repair buggy output from latex font utilities
	$log =~ s/\[[0-9]+\] *//gsm; # remove unneeded font(?) stuff like [42]
	$log =~ s/([]>]) ([)(])/$1\n$2/gsm; # add missing line feeds
	$log =~ s/\[\]\s*/\n/gsm; # remove "[]  " (what information that gives anyway?)
	$log =~ s/^\$?\\T1[\/a-z0-9]+\s*//gsm; # remove font "names" from the start of the lines
	#print($log) ; exit(0);

	$log =~ s/(^[(]\S+)(\s+)/$1\n/gsm; # split "(inputfile1.ext (inputfile2.tld" into two lines
	$log =~ s/(^[)])(\s*)([(]\S+)(\s*)/$1\n$3\n/gsm; # split ") (inputfile1.ext) (inputfile2.tld" into multiple lines
	$log =~ s/^\s*([(]\S+?)([)])(\s*)/$1\n$2\n/gsm; # split "(inputfile1.ext) (inputfile2.tld" into two lines
	$log =~ s/(^[)])(\s+)?/$1\n/gsm; # split ")) (inputfile2.tld" into multiple lines
	$log =~ s/(^[)])(\s+)?/$1\n/gsm; # split ")) (inputfile2.tld" into multiple lines
	$log =~ s/(^[)])(\s+)?/$1\n/gsm; # split ")) (inputfile2.tld" into multiple lines
	$log =~ s/^\s*([(]\S+)(\s+)/$1\n/gsm; # split "(inputfile1.ext (inputfile2.tld" into two lines
	$log =~ s/^\s*([(]\S+?)([)])(\s*)/$1\n$2\n/gsm; # split "(inputfile1.ext) (inputfile2.tld" into two lines

	#print($log) ; exit(0);

	# discard unneeded lines:

	$log =~ s/^\\[a-zA-Z0-9@]+=\\[a-z0-9]+$//gsm; # remove unneeded lines like \c@part=\count79
	$log =~ s/^Package hyperref Info:.*?$//gsm;
	$log =~ s/^LaTeX Font Info:.*?$//gsm;
	#$log =~ s/^\\openout1 = `[^']+?\.aux'\.\nABD: EveryShipout initializing macros.*?\\hoffset 0.0pt\n\\voffset 0.0pt\n\\mag 1000\n--+\n//sm;
	$log =~ s/^(\\openout1 = \`[a-zA-Z0-9]+\.aux'\.).*?\n+ABD: EveryShipout initializing macros.*?\\hoffset 0.0pt\n\\voffset 0.0pt\n\\mag 1000\n+--+/$1/sm;

	#print($log) ; exit(0);

	# only if BRIEF:
	if ($verbose < 3)
	{
		$log =~ s/^This is TeXk?, Version 3.14159.*?$//sm;
		$log =~ s/^LaTeX2e <\d{4}\/\d\d\/\d\d>$//sm;
		$log =~ s/^Babel <v3\.\d\S?> and hyphenation patterns for.*?$//sm;
		$log =~ s/^Document Class:.*?$//gsm;
		$log =~ s/^File: [a-z0-9]+\.(cls|sty|clo|cfg|def|fd) \d{4}\/\d\d\/\d\d.*?$//gsmi;
		$log =~ s/^Package: (color|everyshi|fontenc|inputenc|geometry|keyval|babel|tocbibind|graphicx|graphics|trig|hyperref|url|backref|nameref|listings) \d{4}\/\d\d\/\d\d +v?(er)? ?\d.*?$//gsm;
	}
	
	$log =~ s/\\openout\d+ = `(.*?)'\./$verbose >= -1 ? "creating file: $1" : ""/gsme;
	$log =~ s/^File: ([a-z\/0-9_-]+\.(eps|pdf|png|jpg|gif)) Graphic file.*?\n\s*<\1>/$verbose >= -1  ? "including graphics: $1\n" : ""/gmie;
	
	if ($verbose < 3)
	{
		$log =~ s/^LaTeX Info: Redefining \\(url|ref|pageref) on input line \d+\.$//gsm;
		#$log =~ s/^\s*LaTeX Font Info: .*?$//gsm;
		#print($log) ; exit(0);

		$log =~ s/^Package \S+ Info: .*?$//gsm; # remove all Info messages
		$log =~ s/^Package \S+ Note: .*?$//gsm; # remove all Note messages
		$log =~ s/\\l@[a-z@]+ = a dialect from [\\a-z@].*?$//gsm;

		$log =~ s/Here is how much of TeX's memory you used.*stack positions out of.*?$//gsm;
		$log =~ s/\*hyperref using default driver \S+\*//gsm;
	}

	$log =~ s/Output written on ([^(]+) \((\d+) pages, (\d+) bytes\)./"creating $1 ($2 pages, ".sprintf("%.2f",$3\/1024)." KB)"/gsme;

	# remove stupid help texts that still get putted into the log even with batchmode
	$log =~ s/See the LaTeX manual or LaTeX Companion for explanation.//gsm;
	$log =~ s/Type  H <return>  for immediate help.//gsm;
	$log =~ s/^\s*\.\.\.\s*$//gsm;
	$log =~ s/Try typing  <return>  to proceed.//gsm;
	$log =~ s/If that doesn't work, type  X <return>  to quit.//gsm;
	$log =~ s/Type X to quit or <RETURN> to proceed,//gsm;
	$log =~ s/or enter new name. \(Default extension: cls\)//gsm;
	$log =~ s/Enter file name://gsm;
	$log =~ s/<read \*>//gsm;
	$log =~ s/\*\*\* \(cannot \\read from terminal in nonstop modes\)//gsm;

	$log =~ s/\^\^M/\n/gsm; # fix borken linefeeds
	$log =~ s/\n+/\n/gsm; # remove empty lines
	$log =~ s/^\s+//gsm; # remove indents

	# XXX fix error and warning messages
	$log =~ s/^\! LaTeX Error: ([^\n]+)\nl.(\d+) ([^\n]+)\n/error at line $2 near "$3": $1\n/gsm;
	$log =~ s/^\! LaTeX Error: ([^\n]+)\n/error: $1\n/gsm;
	$log =~ s/^\! Emergency stop.\n/error: cannot continue\n/gsm;
	$log =~ s/^\! LaTeX Warning: ([^\n]+)\nl.(\d+) ([^\n]+)\n/error at line $2 near "$3": $1\n/gsm;
	$log =~ s/^l\.(\d+)/at line $1/gsm;

	#print($log) ; exit(0);
	
	@lines = split(/\n/,$log);
	foreach $line (@lines)
	{
		if ($line =~ /^[(](.*?)$/)
		{
			my $sfile = $file;
			$file = $1;
			$sfile =~ s#^/usr/share/texmf/tex/latex#...#;
			$output .= "$sfile: loading [@files] $file\n" if $verbose > 2;
			push(@files,$file);
		}
		elsif ($line =~ /^[)]/)
		{
			my $sfile = $files[$#files-1] || "latex";
			$sfile =~ s#^/usr/share/texmf/tex/latex#...#;
			$output .= "$sfile: closing file $file\n" if $verbose > 2;
			pop(@files);
			$file = $files[$#files] || "latex"; # get last file name in stack or "latex" if no files open
			
		}
		else
		{
			my $sfile = $file;
			$sfile =~ s#^/usr/share/texmf/tex#...#;
			$output .= "$sfile: $line\n";
		}
	}
	#print($output);
	#exit(0);
	close(LOG);
	return $output;
}

sub debug($)
{
	my ($msg) = @_;
	warn($msg) if $verbose > 2;
	return 1;
}

# returns true if there isn't errors in the log, false if there's any problem
sub check_no_errors($)
{
	my ($log) = @_;
	
	$log =~ m/warning/smi and debug("platex: found a warning.\n") and return 0;
	$log =~ m/error/smi and debug("platex: found an error.\n") and return 0;
	$log =~ m/: \!/smi and debug("platex: found a !-warning.\n") and return 0;

	$log =~ m/There were undefined references/smi and debug("platex: undefined refernces (run bibtex?).\n") and return 0;
	$log =~ m/Rerun to get (cross-references|the bars) right/smi and debug("platex: found a suggestion to rerun.\n") and return 0;
	$log =~ m/: \*\*/smi and debug("platex: found a **-warning.\n") and return 0;

	$log =~ m/No hyphenation patterns were loaded for/smi and debug("platex: no hyphenation patterns (run initex?).\n") and return 0;
	
	return 1;
}

sub try_to_fix_errors($)
{
	my ($log) = @_;
	my ($discard);

	if ($log =~ m/No hyphenation patterns were loaded for/smi)
	{
		if (-f "language.dat")
		{
			warn("platex: no hyphenation patterns were found. Running latex -ini latex.ltx...\n") unless $verbose < 0;
			$discard = sys("latex -ini latex.ltx");
			#$discard = sys("pdflatex -ini pdflatex.ini");
		}
		else
		{
			warn("platex: language.dat not found. Write one and run 'latex -ini latex.ltx'.\n") unless $verbose < 0;
		}
	}
	
	if ($log =~ m/There were undefined references/smi and $bibtex_counter < 1)
	{
		warn("platex: undefined references. Running bibtex to fix the issue...\n") unless $verbose < 0;
		$discard = sys("bibtex $basename");
		$bibtex_counter++;
	}
}

sub display_errors($)
{
	my ($log) = @_;
	if ($verbose > 1)
	{
		print("\nThere were some problems. Log follows:\n".$log);
	}
	else
	{
		print("\nThere were some problems. Some of the log follows:\n");

		my (@lines,$line,$counter);

		$counter = 0;

		# filter log
		@lines = split(/\n/,$log);
		foreach $line (@lines)
		{
			if ($line =~ m/warning/smi)
			{ $counter+=3; }
			elsif ($line =~ m/error/smi)
			{ $counter+=3; }
			elsif ($line =~ m/: \!/smi)
			{ $counter+=3; }
			elsif ($line =~ m/There were undefined references/smi)
			{ $counter+=3; }
			elsif ($line =~ m/Rerun to get (cross-references|the bars) right/smi)
			{ $counter+=3; }
			elsif ($line =~ m/: \*\*/smi)
			{ $counter+=3; }
			elsif ($line =~ m/No hyphenation patterns were loaded for/smi)
			{ $counter+=3; }

			if ($counter > 0)
			{
				print($line."\n");
				$counter--;
			}
		}
		
		print("\n");
	}
	return 1;
}

sub version {
    print "${main::VERSION}\n";
    exit 0;
}

sub sys($) {
	my ($cmd) = @_;
	$cmd =~ s/\n/ /g;
	my ($result);
	warn "platex: running command: $cmd\n" if $verbose > 1;
	$result = `$cmd`; # backtics, run command !
	if ($?)
	{
		warn("platex: error running command '$cmd': $?\n") if $verbose > 1;
		warn("platex: command returned:\n---\n$result---\n") if $verbose > 1;
		#exit(1);
		return 0;
	}
	return $result;
}

=head1 HOW IT WORKS

A B<latex> document, as well as any other TeX document, may need
several passes of compilation in order to fulfill all cross references
and bibliography references, fix longtable calculations, and build the
indices. In a perfect world, latex, bibtex and friends would deal with
this issue automatically. In the less-than-perfect world we live in,
B<platex> tries to do the work for you by calling latex, pdflatex,
bibtex and initex in correct order as many times as required.

B<platex> does not figure out whether or not the source is up to date.
You may use B<make> for that. B<platex> is more like B<gcc> command.

You probably have many files making up the source of your document. You
may figure out correct Makefile depencies by running latex with the
-recorder option. This option tells TeX to maintain a F<.fls> file that
logs all file dependencies that TeX finds in the sources. This is how
the start of the current document's F<.fls> file, F<main.fls>, looks
like:

        PWD /home/wybo/CVSWORK/mk
        INPUT /tex/texmf/web2c/pdflatex.fmt
        INPUT /tex/texmf/pdftex/config/pdftex.cfg
        INPUT /home/wybo/CVSWORK/mk/main.tex
        OUTPUT main.log
        INPUT /texlive/texmf/tex/latex/base/article.cls
        [ 110 similar lines follow... ]

In the future B<platex> may support generating dependency files for make.

=head2 How B<platex> does its thing

=over 8

=item 1

B<platex> runs latex to compile source to DVI, parses the log (the log
generated by LaTeX is far from nice) and looks for evidence on errors.

=item 2a

If no errors were found, B<platex> then proceeds to generate PS, PDF or
other formats.

=item 2b

If errors were found and the retry counter has not reached the maximum
limit, B<platex> tries to fix the issue and goes back to step 1.

=item 3

B<platex> reports the results and exists successfully if no problems
were found and with non-zero exit code if there were warning or errors.
`Overfull hbox' (meaning that LaTeX could not nicely break a line) is
not considered to be an warning or error but it is reported if --fussy
option is set.

=back

=head1 OPTIONS

B<platex> comes with several options. Options below are shown in
logically identical pairs, with the long version in the first column
and the shorthand (without the parameters) below. Default values are
described in text.

You can also set option defaults in an alias. For example:

        alias platex='platex -qq'

=over 8

=item --help

=item -h

Prints help information and exits succesfully.

=item --version

=item -V

Prints name and version and exits succesfully.

=item --verbose

=item -v

Increases verbosity, default verbosity is zero.

=item --quiet

=item -q

Decreases verbosity, the opposite of --verbose.

=item --repeat=<integer: maximum number of retries to compile source>

=item -r

Allow B<platex> to run up to this many times until giving up if there
are still error messages in the output. Default is 4.

=item --log

=item -l

Force log output. Normally the log or excerpts of it will be printed
only if some errors are noticed. This parameter forces printing the
full log (log verbosity is set by --verbose and --quiet flags).

=item --clean

=item -c

Remove all unnecessary files generated by B<latex> and B<bibtex> except
for the B<dvi>, B<aux>, B<bbl>, B<pdf> or B<postscript> files. Keeping
these files increases recompile times.

=item --cleanall

=item -C

Remove all file generated by B<platex>.

=item --pdf

=item -p

Request B<platex> to generate PDF file. Off by default.

=item --ps

=item -P

Request B<platex> to generate PostScript file. Off by default.

=item --dvi

=item -d

Request B<platex> to generate DVI file. On by default, will be turned
off if any other action is called for (e.g. --clean).

=item --input F<filename>

=item -i

Use filename to get source to compile. If input name is not set with
--input option, the first non-option parameter is considered to be the
input file name and if one does not exists, an error message is printed
and B<platex> exists with non-zero error status.

=item --fussy

=item -f

After a B<successful> run, scan the log file for hints of ugly line
breaks. If any is found, print status report to standard output.

=back

=head1 BUGS

platex does not currently compute dependencies.

Latex output parsing is far from perfect.

=head1 AUTHORS

Mikko Rantalainen C<mikko.rantalainen@peda.net>

Wybo Dekker C<wybo@servalys.nl> (platex is loosely based on B<mk>)

=cut
